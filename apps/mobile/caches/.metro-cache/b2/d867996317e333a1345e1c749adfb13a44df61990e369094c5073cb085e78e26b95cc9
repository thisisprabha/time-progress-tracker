{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoHaptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":68},"end":{"line":3,"column":40,"index":108}}],"key":"3WqQQRS5WG7zFWoPm3OZ82Alno4=","exportNames":["*"]}},{"name":"./Haptics.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":109},"end":{"line":4,"column":96,"index":205}}],"key":"4K2GreqvhWei0+qUJVORf63x8ww=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"AndroidHaptics\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.AndroidHaptics;\n    }\n  });\n  Object.defineProperty(exports, \"ImpactFeedbackStyle\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.ImpactFeedbackStyle;\n    }\n  });\n  Object.defineProperty(exports, \"NotificationFeedbackType\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.NotificationFeedbackType;\n    }\n  });\n  exports.impactAsync = impactAsync;\n  exports.notificationAsync = notificationAsync;\n  exports.performAndroidHapticsAsync = performAndroidHapticsAsync;\n  exports.selectionAsync = selectionAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoHaptics = _interopRequireDefault(require(_dependencyMap[2], \"./ExpoHaptics\"));\n  var _Haptics = require(_dependencyMap[3], \"./Haptics.types\");\n  // @needsAudit\n  /**\n   * The kind of notification response used in the feedback.\n   * @param type A notification feedback type that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and iOS is directly mapped to [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype).\n   * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n   * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n   */\n  async function notificationAsync(type = _Haptics.NotificationFeedbackType.Success) {\n    if (!_ExpoHaptics.default?.notificationAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptics', 'notificationAsync');\n    }\n    await _ExpoHaptics.default.notificationAsync(type);\n  }\n\n  // @needsAudit\n  /**\n   * @param style A collision indicator that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and on iOS, it is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).\n   * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy, Rigid, Soft}`.\n   * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n   */\n  async function impactAsync(style = _Haptics.ImpactFeedbackStyle.Medium) {\n    if (!_ExpoHaptics.default?.impactAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptic', 'impactAsync');\n    }\n    await _ExpoHaptics.default.impactAsync(style);\n  }\n\n  // @needsAudit\n  /**\n   * Used to let a user know when a selection change has been registered.\n   * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n   */\n  async function selectionAsync() {\n    if (!_ExpoHaptics.default?.selectionAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptic', 'selectionAsync');\n    }\n    await _ExpoHaptics.default.selectionAsync();\n  }\n\n  /**\n   * Use the device haptics engine to provide physical feedback to the user.\n   *\n   * @platform android\n   */\n  async function performAndroidHapticsAsync(type) {\n    if (_expoModulesCore.Platform.OS !== 'android') {\n      return;\n    }\n    _ExpoHaptics.default.performHapticsAsync(type);\n  }\n});","lineCount":83,"map":[[28,2,1,0],[28,6,1,0,"_expoModulesCore"],[28,22,1,0],[28,25,1,0,"require"],[28,32,1,0],[28,33,1,0,"_dependencyMap"],[28,47,1,0],[29,2,3,0],[29,6,3,0,"_ExpoHaptics"],[29,18,3,0],[29,21,3,0,"_interopRequireDefault"],[29,43,3,0],[29,44,3,0,"require"],[29,51,3,0],[29,52,3,0,"_dependencyMap"],[29,66,3,0],[30,2,4,0],[30,6,4,0,"_Haptics"],[30,14,4,0],[30,17,4,0,"require"],[30,24,4,0],[30,25,4,0,"_dependencyMap"],[30,39,4,0],[31,2,6,0],[32,2,7,0],[33,0,8,0],[34,0,9,0],[35,0,10,0],[36,0,11,0],[37,0,12,0],[38,0,13,0],[39,2,14,7],[39,17,14,22,"notificationAsync"],[39,34,14,39,"notificationAsync"],[39,35,15,2,"type"],[39,39,15,32],[39,42,15,35,"NotificationFeedbackType"],[39,75,15,59],[39,76,15,60,"Success"],[39,83,15,67],[39,85,16,17],[40,4,17,2],[40,8,17,6],[40,9,17,7,"ExpoHaptics"],[40,29,17,18],[40,31,17,20,"notificationAsync"],[40,48,17,37],[40,50,17,39],[41,6,18,4],[41,12,18,10],[41,16,18,14,"UnavailabilityError"],[41,52,18,33],[41,53,18,34],[41,62,18,43],[41,64,18,45],[41,83,18,64],[41,84,18,65],[42,4,19,2],[43,4,20,2],[43,10,20,8,"ExpoHaptics"],[43,30,20,19],[43,31,20,20,"notificationAsync"],[43,48,20,37],[43,49,20,38,"type"],[43,53,20,42],[43,54,20,43],[44,2,21,0],[46,2,23,0],[47,2,24,0],[48,0,25,0],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,2,30,7],[53,17,30,22,"impactAsync"],[53,28,30,33,"impactAsync"],[53,29,31,2,"style"],[53,34,31,28],[53,37,31,31,"ImpactFeedbackStyle"],[53,65,31,50],[53,66,31,51,"Medium"],[53,72,31,57],[53,74,32,17],[54,4,33,2],[54,8,33,6],[54,9,33,7,"ExpoHaptics"],[54,29,33,18],[54,31,33,20,"impactAsync"],[54,42,33,31],[54,44,33,33],[55,6,34,4],[55,12,34,10],[55,16,34,14,"UnavailabilityError"],[55,52,34,33],[55,53,34,34],[55,61,34,42],[55,63,34,44],[55,76,34,57],[55,77,34,58],[56,4,35,2],[57,4,36,2],[57,10,36,8,"ExpoHaptics"],[57,30,36,19],[57,31,36,20,"impactAsync"],[57,42,36,31],[57,43,36,32,"style"],[57,48,36,37],[57,49,36,38],[58,2,37,0],[60,2,39,0],[61,2,40,0],[62,0,41,0],[63,0,42,0],[64,0,43,0],[65,2,44,7],[65,17,44,22,"selectionAsync"],[65,31,44,36,"selectionAsync"],[65,32,44,36],[65,34,44,54],[66,4,45,2],[66,8,45,6],[66,9,45,7,"ExpoHaptics"],[66,29,45,18],[66,31,45,20,"selectionAsync"],[66,45,45,34],[66,47,45,36],[67,6,46,4],[67,12,46,10],[67,16,46,14,"UnavailabilityError"],[67,52,46,33],[67,53,46,34],[67,61,46,42],[67,63,46,44],[67,79,46,60],[67,80,46,61],[68,4,47,2],[69,4,48,2],[69,10,48,8,"ExpoHaptics"],[69,30,48,19],[69,31,48,20,"selectionAsync"],[69,45,48,34],[69,46,48,35],[69,47,48,36],[70,2,49,0],[72,2,51,0],[73,0,52,0],[74,0,53,0],[75,0,54,0],[76,0,55,0],[77,2,56,7],[77,17,56,22,"performAndroidHapticsAsync"],[77,43,56,48,"performAndroidHapticsAsync"],[77,44,56,49,"type"],[77,48,56,69],[77,50,56,71],[78,4,57,2],[78,8,57,6,"Platform"],[78,33,57,14],[78,34,57,15,"OS"],[78,36,57,17],[78,41,57,22],[78,50,57,31],[78,52,57,33],[79,6,58,4],[80,4,59,2],[81,4,60,2,"ExpoHaptics"],[81,24,60,13],[81,25,60,14,"performHapticsAsync"],[81,44,60,33],[81,45,60,34,"type"],[81,49,60,38],[81,50,60,39],[82,2,61,0],[83,0,61,1],[83,3]],"functionMap":{"names":["<global>","notificationAsync","impactAsync","selectionAsync","performAndroidHapticsAsync"],"mappings":"AAA;OCa;CDO;OES;CFO;OGO;CHK;OIO;CJK"}},"type":"js/module"}]}